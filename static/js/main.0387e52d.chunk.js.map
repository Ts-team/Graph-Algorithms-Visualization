{"version":3,"sources":["components/Navigation/NavigationItems/NavigationItem/NavigationItem.module.css","components/Navigation/Toolbar/Toolbar.module.css","components/Cell.js","utility/MazeGenerators/RecursiveDivision.js","utility/generateGraph.js","utility/DS/Queue.js","utility/DS/Graph.js","utility/DS/MinHeap.js","utility/constants.js","utility/Node.js","hooks/useNodeGrid.js","components/Navigation/NavigationItems/NavigationItem/NavigationItem.js","components/Navigation/NavigationItems/Dropdown/DropDown.js","components/Navigation/NavigationItems/Subnav/Subnav.js","components/Navigation/NavigationItems/Dropdown/DropItem/DropItem.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/Toolbar/Toolbar.js","components/Board.js","utility/MazeGenerators/Random.js","App.js","index.js"],"names":["module","exports","Cell","node","onMouseEnter","onMouseDown","onMouseLeave","onMouseUp","classes","useEffect","console","log","setClasses","row","col","push","className","join","id","recursiveDivision","grid","a","drawContourWalls","width","length","height","prohibitedCells","divide","chooseOrientation","orientation","prohibited","horizontal","whereCol","Math","ceil","random","whereRow","passCol","passRow","drawWall","newwidth","newheight","newwidth2","newheight2","startRow","startCol","i","cell","document","getElementById","classList","contains","isProhibitedCoord","add","isBorder","remove","updateProhibitedCells","j","getNeighbors","cellNotInGraph","isWall","neighbors","generateNodeGrid","nodesGrid","graph","Graph","getElementsByClassName","addVertex","generateGraph","startNode","targetNode","currentNode","isStart","isTarget","addEdge","dist","Queue","this","items","element","isEmpty","shift","str","noOfVertices","AdjList","Map","v","set","w","get","get_keys","keys","get_values","conc","startingNode","animations","visited","q","enqueue","getQueueElement","dequeue","get_List","n","neigh","predecessor","DFSUtil","vert","get_neighbours","get_elem","hasSecond","heap","MinHeap","item","pop","currentdist","adj","adjacentNode","d","isSecondTarget","dijkstra","f","g","manhattanDistance","print","h","abs","euclideanDistance","sqrt","pow","floor","selector","parentIndex","parentVal","pushedVal","swap","max","t","ret","temp","rightChildIndex","leftChildIndex","lowest","includes","indexOf","arr","GREEDY_BFS","Node","Infinity","isKeyValue","markShortestPath","useNodeGrid","numRows","numCols","newNode","nodeGrid","useRef","current","resetGrid","reset","removeVisuals","NavigationItem","children","clicked","onClick","Btn","DropDown","title","moreInfo","class","Subnav","DropItem","NavigationItems","setAlgorithm","executeAlgorithm","toggleShowModal","algorithm","mazeGen","settingSecondTarget","clear","alert","cts","toolbar","props","Toolbar","Board","useState","isMouseDown","setIsMouseDown","animating","setIsAnimating","isMovingTarget","setIsMovingTarget","isMovingSecondTarget","setIsMovingSecondTarget","isMovingStart","setIsMovingStart","setSettingSecondTarget","hasSecondTarget","setHasSecondTarget","numTargets","setNumTargets","onMouseEnterHandler","setAsSecondTarget","setWall","setAsStart","setAsTarget","onMouseDownHandler","onMouseLeaveHandler","onMouseUpHandler","Grid","map","rowNum","val","colNum","key","BFS","util","bfs","DFS","dfs","Dijkstra","AStar","aStar","bestFirstSearch","removeVisualization","doRandomMaze","board","doRecursiveDivision","animate","count","intervalId","setInterval","markSearched2","clearInterval","type","style","gridTemplateRows","gridTemplateColumns","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0387e52d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItem\":\"NavigationItem_NavigationItem__2SpXc\",\"Btn\":\"NavigationItem_Btn__3xhRr\",\"navbar\":\"NavigationItem_navbar__2rE4b\",\"NavigationItem-content\":\"NavigationItem_NavigationItem-content__2c_Zw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__ApScI\",\"dropdown\":\"Toolbar_dropdown__3LTS7\",\"dropbtn\":\"Toolbar_dropbtn__30BvA\"};","import React, { useEffect } from \"react\";\nimport \"./Cell.css\";\n\nconst Cell = ({ node, onMouseEnter, onMouseDown, onMouseLeave, onMouseUp }) => {\n  let classes = [\"Cell\"];\n  let icon = null;\n\n  useEffect(() => {\n    console.log(\"Cell UseEffect\");\n    node.setClasses();\n  }, [node]);\n\n  if (node.row === 10 && node.col === 10) {\n    classes.push(\"Filled\");\n  }\n  if (node.row === 10 && node.col === 30) {\n    classes.push(\"Target\");\n  }\n\n  return (\n    <div\n      className={classes.join(\" \")}\n      id={`${node.row} ${node.col}`}\n      onMouseDown={() => onMouseDown(node)}\n      onMouseEnter={() => onMouseEnter(node)}\n      onMouseLeave={() => onMouseLeave(node)}\n      onMouseUp={() => onMouseUp(node)}\n    >\n      {icon}\n    </div>\n  );\n};\n\nexport default Cell;\n","const HORIZONTAL = \"horizontal\";\nconst VERTICAL = \"vertical\";\n\nexport const recursiveDivision = async (grid) => {\n  drawContourWalls(grid);\n  const width = grid[0].length - 2; // Subtract 2 since we drew a contour\n  const height = grid.length - 2;\n  let prohibitedCells = [];\n  divide(\n    1,\n    1,\n    width,\n    height,\n    chooseOrientation(width, height),\n    prohibitedCells\n  );\n};\n\nconst divide = (col, row, width, height, orientation, prohibited) => {\n  if (width <= 2 || height <= 2 ) return;\n\n  const horizontal = orientation === HORIZONTAL;\n\n  // Where will the wall be drawn from?\n  let whereCol =\n    col + (horizontal ? 0 : Math.ceil(Math.random() * (width - 2))); // Rand number between the col and width\n\n  let whereRow =\n    row + (horizontal ? Math.ceil(Math.random() * (height - 2)) : 0); // Rand number between the row and height\n\n  // Where will the passage through the wall exist?\n  const passCol =\n    whereCol + (horizontal ? Math.ceil(Math.random() * (width - 1)) : 0); // Rand number between the col and width\n  const passRow =\n    whereRow + (horizontal ? 0 : Math.ceil(Math.random() * (height - 1))); // Rand number between the row and height\n\n  // How long will the wall be?\n  const length = horizontal ? width : height;\n\n  // Draw the walls\n  drawWall(\n    whereRow,\n    whereCol,\n    passRow,\n    passCol,\n    horizontal,\n    length,\n    prohibited\n  );\n\n  let newCol = row;\n  let newRow = col;\n\n  let newwidth = horizontal ? width : whereCol - col;\n  let newheight = horizontal ? whereRow - row : height;\n  divide(\n    newCol,\n    newRow,\n    newwidth,\n    newheight,\n    chooseOrientation(newwidth, newheight),\n    prohibited\n  );\n\n  let newCol2 = horizontal ? col : whereCol + 1;\n  let newRow2 = horizontal ? whereRow + 1 : row;\n\n  let newwidth2 = horizontal ? width : col + width - whereCol - 1;\n  let newheight2 = horizontal ? row + height - whereRow - 1 : height;\n\n  divide(\n    newCol2,\n    newRow2,\n    newwidth2,\n    newheight2,\n    chooseOrientation(newwidth2, newheight2),\n    prohibited\n  );\n};\n\nconst drawWall = (\n  startRow,\n  startCol,\n  passRow,\n  passCol,\n  horizontal,\n  length,\n  prohibited\n) => {\n \n  for (let i = 0; i < length; i++) {\n    const row = startRow + (horizontal ? 0 : i);\n    const col = startCol + (horizontal ? i : 0);\n\n    const cell = document.getElementById(`${row} ${col}`);\n\n    if (\n      cell &&\n      !cell.classList.contains(\"Target\") &&\n      !cell.classList.contains(\"Filled\") &&\n      !isProhibitedCoord(row, col, prohibited)\n    ) {\n      cell.classList.add(\"Wall\");\n    }\n  }\n\n  const cell = document.getElementById(`${passRow} ${passCol}`);\n  if (cell && !isBorder(passRow, passCol)) {\n    cell.classList.remove(\"Wall\");\n  }\n  updateProhibitedCells(passRow, passCol, horizontal, prohibited);\n};\n\nconst chooseOrientation = (width, height) => {\n  if (width < height) {\n    return HORIZONTAL;\n  }\n  return VERTICAL;\n};\n\nconst drawContourWalls = (grid) => {\n  for (let i = 0; i < grid.length; i++) {\n    let classes = document.getElementById(`${i} ${0}`).classList;\n    classes.add(\"Wall\");\n    classes = document.getElementById(`${i} ${grid[i].length - 1}`).classList;\n    classes.add(\"Wall\");\n  }\n\n  for (let j = 0; j < grid[0].length; j++) {\n    let classes = document.getElementById(`${0} ${j}`).classList;\n    classes.add(\"Wall\");\n    classes = document.getElementById(`${grid.length - 1} ${j}`).classList;\n    classes.add(\"Wall\");\n  }\n};\n\nconst updateProhibitedCells = (row, col, horizontal, prohibited) => {\n  if (!horizontal) {\n    prohibited.push([row, col + 1]);\n    prohibited.push([row, col - 1]);\n  } else {\n    prohibited.push([row + 1, col]);\n    prohibited.push([row - 1, col]);\n  }\n};\n\nconst isProhibitedCoord = (row, col, prohibited) => {\n  for (let i = 0; i < prohibited.length; i++) {\n    if (prohibited[i][0] === row && prohibited[i][1] === col) return true;\n  }\n  return false;\n};\n\nconst isBorder = (row, col) => {\n  return row === 0 || row === 19 || col === 0 || col === 49;\n}\n","import { Graph } from \"./index\";\n\nconst getNeighbors = (grid, row, col) => {\n  const cellNotInGraph = (row, col) => {\n    return grid[row][col].isWall();\n  };\n\n  if (cellNotInGraph(row, col)) return [];\n  let neighbors = [];\n\n  if (row > 0 && !cellNotInGraph(row - 1, col)) {\n    // N\n    neighbors.push(grid[row - 1][col]);\n  }\n  if (col > 0 && !cellNotInGraph(row, col - 1)) {\n    // W\n    neighbors.push(grid[row][col - 1]);\n  }\n  if (row < grid.length - 1 && !cellNotInGraph(row + 1, col)) {\n    // S\n    neighbors.push(grid[row + 1][col]);\n  }\n  if (col < grid[row].length - 1 && !cellNotInGraph(row, col + 1)) {\n    // E\n    neighbors.push(grid[row][col + 1]);\n  }\n\n  return neighbors;\n};\n\nexport const calculateNumVertices = () => {\n  const numCells = document.getElementsByClassName(\"Cell\").length;\n  const numWalls = document.getElementsByClassName(\"Wall\").length;\n  return numCells - numWalls;\n};\n\nexport const generateNodeGrid = (grid) => {\n  const nodesGrid = [];\n  const graph = new Graph(calculateNumVertices());\n\n  for (let row in grid) {\n    nodesGrid[row] = [];\n    for (let col in grid[row]) {\n      graph.addVertex(grid[row][col]);\n    }\n  }\n  return graph;\n};\n\nexport const generateGraph = (nodesGrid) => {\n  let startNode = null;\n  let targetNode = null;\n\n  const graph = generateNodeGrid(nodesGrid);\n\n  for (let row = 0; row < nodesGrid.length; row++) {\n    for (let col = 0; col < nodesGrid[row].length; col++) {\n      const currentNode = nodesGrid[row][col];\n\n      if (!currentNode.isWall()) {\n        if (currentNode.isStart()) startNode = currentNode;\n        if(currentNode.isTarget()) targetNode = currentNode;\n        const neighbors = getNeighbors(nodesGrid, row, col);\n\n        for (let i in neighbors) {\n          graph.addEdge(currentNode, neighbors[i]);\n        }\n      }\n    }\n  }\n  startNode.dist = 0;\n  return { graph, startNode, targetNode };\n};\n","// Queue class\nexport class Queue {\n  // Array is used to implement a Queue\n  constructor() {\n    this.items = [];\n  }\n\n  // enqueue(item)\n  enqueue(element) {\n    // adding element to the queue\n    this.items.push(element);\n  }\n\n  // dequeue()\n  dequeue() {\n    // removing element from the queue\n    // returns underflow when called\n    // on empty queue\n    if (this.isEmpty()) return \"Underflow\";\n    return this.items.shift();\n  }\n\n  // front()\n  front() {\n    // returns the Front element of\n    // the queue without removing it.\n    if (this.isEmpty()) return \"No elements in Queue\";\n    return this.items[0];\n  }\n\n  // isEmpty()\n  isEmpty() {\n    // return true if the queue is empty.\n    return this.items.length === 0;\n  }\n\n  // printQueue()\n  printQueue() {\n    var str = \"\";\n    for (var i = 0; i < this.items.length; i++) str += this.items[i] + \" \";\n    return str;\n  }\n}\n","import { Queue } from \"./Queue\";\nimport { MinHeap } from \"../index\";\n\nexport class Graph {\n  constructor(noOfVertices) {\n    this.noOfVertices = noOfVertices;\n    this.AdjList = new Map();\n  }\n\n  addVertex(v) {\n    // initialize the adjacent list with a\n    // null array\n    this.AdjList.set(v, []);\n  }\n\n  addEdge(v, w) {\n    // get the list for vertex v and put the\n    // vertex w denoting edge between v and w\n    this.AdjList.get(v).push(w);\n\n    // Since graph is undirected,\n    // add an edge from w to v also\n    // this.AdjList.get(w).push(v);\n  }\n\n  printGraph() {\n    // get all the vertices\n    var get_keys = this.AdjList.keys();\n\n    // iterate over the vertices\n    for (var i of get_keys) {\n      // great the corresponding adjacency list\n      // for the vertex\n      var get_values = this.AdjList.get(i);\n      var conc = \"\";\n\n      // iterate over the adjacency list\n      // concatenate the values into a string\n      for (var j of get_values) conc += j + \" \";\n\n      // print the vertex and its adjacency list\n      console.log(i + \" -> \" + conc);\n    }\n  }\n\n  // bfs(v)\n  // function to performs BFS\n  bfs(startingNode) {\n    // create a visited array\n    const animations = [];\n\n    var visited = [];\n    for (var i = 0; i < this.noOfVertices; i++) visited[i] = false;\n\n    // Create an object for queue\n    var q = new Queue();\n\n    // add the starting node to the queue\n    visited[startingNode] = true;\n    q.enqueue(startingNode);\n\n    // loop until queue is element\n    while (!q.isEmpty()) {\n      // get the element from the queue\n      var getQueueElement = q.dequeue();\n\n      // passing the current vertex to callback funtion\n      // console.log(getQueueElement);\n\n      // get the adjacent list for current vertex\n      var get_List = this.AdjList.get(getQueueElement);\n\n      // loop through the list and add the element to the\n      // queue if it is not processed yet\n      for (var n in get_List) {\n        var neigh = get_List[n];\n\n        if (!visited[neigh]) {\n          neigh.predecessor = getQueueElement;\n          animations.push(neigh);\n          visited[neigh] = true;\n          q.enqueue(neigh);\n        }\n      }\n    }\n\n    return animations;\n  }\n\n  // dfs(v)\n  // Main DFS method\n  dfs(startingNode) {\n    const animations = [];\n\n    var visited = [];\n    for (var i = 0; i < this.noOfVertices; i++) visited[i] = false;\n\n    this.DFSUtil(startingNode, visited, animations);\n\n    return animations;\n  }\n\n  // Recursive function which process and explore\n  // all the adjacent vertex of the vertex with which it is called\n  DFSUtil(vert, visited, animations) {\n    visited[vert] = true;\n    console.log(vert);\n\n    var get_neighbours = this.AdjList.get(vert);\n\n    for (var i in get_neighbours) {\n      var get_elem = get_neighbours[i];\n      if (!visited[get_elem]) {\n        get_elem.predecessor = vert;\n        animations.push(get_elem);\n        this.DFSUtil(get_elem, visited, animations);\n      }\n    }\n  }\n\n  //dijkstra solve graph starting at s\n  dijkstra(startNode, animations, hasSecond) {\n    const heap = new MinHeap((item) => item.dist);\n\n    heap.push(startNode);\n\n    while (!heap.isEmpty()) {\n      //for each existing solution\n      const currentNode = heap.pop();\n\n      var currentdist = currentNode.dist;\n      var adj = this.AdjList.get(currentNode); // get neighbors\n\n      //for each of its adjacent nodes...\n      for (var a in adj) {\n        const adjacentNode = adj[a];\n\n        //choose nearest node with lowest *total* cost\n        var d = 1 + currentdist;\n\n        if (d < adjacentNode.dist && !heap.contains(adjacentNode)) {\n          animations.push(adjacentNode);\n          heap.push(adjacentNode);\n          //reference parent\n          adjacentNode.predecessor = currentNode;\n          adjacentNode.dist = d;\n          if (adjacentNode.isTarget() || adjacentNode.isSecondTarget())\n            if (hasSecond) {\n              this.dijkstra(adjacentNode, animations);\n            } else {\n              return animations;\n            }\n        }\n      }\n    }\n    return animations;\n  }\n\n  aStar(startNode, targetNode) {\n    const animations = [];\n\n    const heap = new MinHeap((item) => item.f);\n    startNode.g = 0;\n    this.manhattanDistance(startNode, targetNode);\n\n    heap.push(startNode);\n\n    heap.print();\n\n    while (!heap.isEmpty()) {\n      const currentNode = heap.pop();\n\n      var currentdist = currentNode.dist;\n      var adj = this.AdjList.get(currentNode); // get neighbors\n\n      //for each of its adjacent nodes...\n      for (var a in adj) {\n        const adjacentNode = adj[a];\n\n        //choose nearest node with lowest *total* cost\n        var d = 1 + currentdist;\n\n        if (d < adjacentNode.dist && !heap.contains(adjacentNode)) {\n          animations.push(adjacentNode);\n          this.manhattanDistance(adjacentNode, targetNode);\n          heap.push(adjacentNode);\n          //reference parent\n          adjacentNode.predecessor = currentNode;\n          adjacentNode.dist = d;\n          if (adjacentNode.isTarget()) return animations;\n        }\n      }\n    }\n\n    return animations;\n  }\n\n  manhattanDistance(node, targetNode) {\n    const h =\n      Math.abs(node.col - targetNode.col) + Math.abs(node.row - targetNode.row);\n    node.h = h;\n    node.f = node.g + node.h;\n  }\n\n  bestFirstSearch(startNode, targetNode) {\n    const animations = [];\n\n    const heap = new MinHeap((item) => item.f);\n    startNode.g = 0;\n    this.euclideanDistance(startNode, targetNode);\n\n    heap.push(startNode);\n\n    heap.print();\n\n    while (!heap.isEmpty()) {\n      const currentNode = heap.pop();\n\n      var currentdist = currentNode.dist;\n      var adj = this.AdjList.get(currentNode); // get neighbors\n\n      //for each of its adjacent nodes...\n      for (var a in adj) {\n        const adjacentNode = adj[a];\n\n        //choose nearest node with lowest *total* cost\n        var d = 1 + currentdist;\n\n        if (d < adjacentNode.dist && !heap.contains(adjacentNode)) {\n          animations.push(adjacentNode);\n\n          this.euclideanDistance(adjacentNode, targetNode);\n\n          heap.push(adjacentNode);\n\n          //reference parent\n          adjacentNode.predecessor = currentNode;\n          adjacentNode.dist = d;\n          if (adjacentNode.isTarget()) return animations;\n        }\n      }\n    }\n\n    return animations;\n  }\n\n  euclideanDistance(node, targetNode) {\n    const h = Math.sqrt(\n      Math.pow(node.col - targetNode.col, 2) +\n        Math.pow(node.row - targetNode.row, 2)\n    );\n    node.h = Math.floor(h);\n    node.f = node.g + node.h;\n  }\n}\n","export class MinHeap {\n  constructor(selector) {\n    this.items = [];\n    this.selector = selector;\n  }\n\n  seek() {\n    return this.items[0];\n  }\n\n  push(item) {\n    let i = this.items.length;\n    this.items.push(item);\n\n    let parentIndex = Math.floor((i + 1) / 2 - 1);\n\n    if (parentIndex < 0) parentIndex = 0;\n\n    // console.log(\"ParentIndex\", parentIndex);\n\n    let parentVal = this.selector(this.items[parentIndex]);\n    const pushedVal = this.selector(this.items[i]);\n\n    // console.log(\"ParentVal, parentIndex:\", parentVal, parentIndex);\n    // console.log(\"PushedVal\", pushedVal);\n\n    while (i > 0 && parentVal > pushedVal) {\n      parentIndex = Math.floor((i + 1) / 2 - 1);\n      // console.log(\n      //   \"INSIDE LOOP ParentVal, parentIndex:\",\n      //   parentVal,\n      //   parentIndex\n      // );\n\n      this.swap(i, parentIndex);\n\n      i = parentIndex;\n      // console.log(\n      //   \"New INSIDE LOOP parentIndex:\",\n      //   Math.max(Math.floor((i + 1) / 2 - 1), 0)\n      // );\n\n      parentVal = this.selector(\n        this.items[Math.max(Math.floor((i + 1) / 2 - 1), 0)]\n      );\n    }\n\n    // this.print();\n  }\n\n  swap(i, j) {\n    let t = this.items[i];\n    this.items[i] = this.items[j];\n    this.items[j] = t;\n  }\n\n  pop() {\n    // console.log(\"Items before pop:\", this.items);\n    if (this.items.length <= 1) return this.items.pop(); //If it is the last element pop it\n    const ret = this.items[0]; // What we will return\n    let temp = this.items.pop();\n    this.items[0] = temp; // Place last element in array at front\n\n    // console.log(\"Items after pop:\", this.items); // Good till here\n    let i = 0; // We adjust heap from top to down\n\n    while (true) {\n      let rightChildIndex = (i + 1) * 2;\n      let leftChildIndex = (i + 1) * 2 - 1;\n\n      // console.log(\"rightIndex\", rightChildIndex);\n      // console.log(\"rightValue\", this.items[rightChildIndex]);\n      // console.log(\"leftIndex\", leftChildIndex);\n      // console.log(\"leftValue\", this.items[leftChildIndex]);\n      let lowest = rightChildIndex;\n\n      if (\n        leftChildIndex >= this.items.length &&\n        rightChildIndex >= this.items.length\n      )\n        break;\n      if (leftChildIndex >= this.items.length) lowest = rightChildIndex;\n      if (rightChildIndex >= this.items.length) lowest = leftChildIndex;\n\n      if (\n        !(leftChildIndex >= this.items.length) &&\n        !(rightChildIndex >= this.items.length)\n      ) {\n        lowest =\n          this.selector(this.items[rightChildIndex]) <\n          this.selector(this.items[leftChildIndex])\n            ? rightChildIndex\n            : leftChildIndex;\n      } // Find the smallest child\n\n      // If the parent is greater than the smallest child: swap\n      if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\n        this.swap(i, lowest);\n        i = lowest;\n      } else break; // We have finished setting up the heap\n    }\n\n    // Return topmost element\n    return ret;\n  }\n\n  contains(item) {\n    return this.items.includes(item);\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  delete(item) {\n    let i = this.items.indexOf(item);\n    // heapify\n    this.items[i] = this.items.pop();\n    while (true) {\n      let lowest =\n        this.selector(this.items[(i + 1) * 2]) <\n        this.selector(this.items[(i + 1) * 2 - 1])\n          ? (i + 1) * 2\n          : (i + 1) * 2 - 1;\n      if (this.selector(this.items[i]) > this.selector(this.items[lowest])) {\n        let t = this.items[i];\n        this.items[i] = this.items[lowest];\n        this.items[lowest] = t;\n        i = lowest;\n      } else break;\n    }\n  }\n\n  print() {\n    for (let i = 0; i < this.items.length; i++) {\n      console.log(this.items[i]);\n    }\n  }\n\n  heapify(arr) {\n    for (let i = 0; i < arr.length; i++) {\n      this.push(arr[i]);\n    }\n  }\n}\n\n// const heap = new MinHeap((x) => x.dist);\n// heap.heapify([6, 3, 6, 9, 43, 0, 8, 0, 8]);\n// console.log(heap);\n// console.log(heap.isEmpty());\n\n// heap.heapify([1, 2, 7, 4, 8, 0, 4, 2, 7, 3]);\n\n// heap.heapify([\n//   { dist: 1 },\n//   { dist: 2 },\n//   { dist: 7 },\n//   { dist: 4 },\n//   { dist: 8 },\n//   { dist: 0 },\n//   { dist: 4 },\n//   { dist: 2 },\n//   { dist: 7 },\n//   { dist: 3 },\n// ]);\n\n// heap.heapify([\n//   { dist: 1 },\n//   { dist: 2 },\n//   { dist: 7 },\n//   { dist: 4 },\n//   { dist: 8 },\n//   { dist: 0 },\n//   { dist: 4 },\n//   { dist: 2 },\n//   { dist: 7 },\n//   { dist: 3 },\n//   { dist: 23 },\n//   { dist: 200 },\n//   { dist: -1 },\n// ]);\n\n// heap.print();\n// // const a = heap.pop()\n// // heap.pop()\n// // heap.pop()\n\n// console.log(heap.items);\n\n// while (!heap.isEmpty()) {\n//   // console.log(\"Length\", heap.items.length);\n//   const a = heap.pop();\n//   console.log(\"Value:\", a);\n//   // console.log(\"Length\", heap.items.length);\n// }\n","export const DIJKSTRA = \"Dijkstra\"\nexport const ASTAR = \"A*\"\nexport const GREEDY_BFS = \"Greedy Best First Search\"\nexport const BFS = \"Breadth First Search\"\nexport const DFS = \"Depth First Search\"\n\nexport const RAND_MAZE = \"Random Maze\"\nexport const RECURSIVE_DIVISON = \"Recursive Division\"\n","export default class Node {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n    this.predecessor = null;\n    this.dist = Infinity;\n    this.g = 1;\n    this.h = null;\n    this.f = null;\n  }\n\n  setClasses() {\n    this.cell = document.getElementById(`${this.row} ${this.col}`);\n    this.classes = this.cell.classList;\n  }\n\n  toString() {\n    return \"(\" + this.row + \" \" + this.col + \")\";\n  }\n\n  setWall() {\n    if (this.isKeyValue()) return;\n    this.classes.add(\"Wall\");\n  }\n\n  setAsTarget() {\n    this.classes.add(\"Target\");\n  }\n\n  setAsStart() {\n    this.classes.add(\"Filled\");\n  }\n\n  setAsSecondTarget() {\n    this.classes.add(\"SecondaryTarget\")\n  }\n\n  markSearched() {\n    if (this.isTarget()) return;\n    this.classes.add(\"Searched\");\n  }\n\n  markSearched2(){\n    if (this.isTarget()) return;\n    this.classes.add(\"Searched2\");\n  }\n\n  removeVisuals() {\n    this.classes.remove(\"ShortestPath\");\n    this.classes.remove(\"Searched\");\n    this.classes.remove(\"Searched2\");\n    this.predecessor = null;\n    this.dist = Infinity;\n  }\n\n  reset() {\n    this.classes.remove(\"ShortestPath\");\n    this.classes.remove(\"Wall\");\n    this.classes.remove(\"Searched\");\n    this.classes.remove(\"Searched2\");\n    this.classes.remove(\"SecondaryTarget\");\n    this.predecessor = null;\n    this.dist = Infinity;\n  }\n\n  clear() {\n    this.classes.remove(\"Target\");\n    this.classes.remove(\"Filled\");\n    this.classes.remove(\"SecondaryTarget\");\n  }\n\n  isTarget() {\n    return this.classes.contains(\"Target\")\n  }\n\n  isStart() {\n    return this.classes.contains(\"Filled\");\n  }\n\n  isSecondTarget(){\n    return this.classes.contains(\"SecondaryTarget\");\n  }\n\n  isKeyValue() {\n    return this.isTarget() || this.isStart() || this.isSecondTarget();\n  }\n\n  isWall() {\n    return this.classes.contains(\"Wall\");\n  }\n\n  isPartOfGraph() {\n    return !this.isWall();\n  }\n\n  markShortestPath() {\n    if (!this.isTarget() && !this.isStart()) {\n      this.classes.remove(\"Searched\");\n      this.classes.remove(\"Searched2\");\n      this.classes.add(\"ShortestPath\");\n    }\n    if (this.predecessor != null) {\n      this.predecessor.markShortestPath();\n    }\n  }\n}\n","import { useRef } from \"react\";\nimport Node from \"../utility/Node\";\n\nconst generateNodeGrid = (numRows, numCols) => {\n  const nodesGrid = [];\n\n  for (let row = 0; row < numRows; row++) {\n    nodesGrid[row] = [];\n    for (let col = 0; col < numCols; col++) {\n      const newNode = new Node(row, col);\n      nodesGrid[row][col] = newNode;\n    }\n  }\n\n  return nodesGrid;\n};\n\nconst useNodeGrid = () => {\n  const nodesGrid = generateNodeGrid(20, 50);\n  const nodeGridRef = useRef(nodesGrid);\n  const nodeGrid = nodeGridRef.current;\n\n  const resetGrid = () => {\n    for (let row in nodeGrid) {\n      for (let col in nodeGrid[row]) {\n        nodeGrid[row][col].reset();\n      }\n    }\n  };\n\n  const removeVisuals = () => {\n    for (let row in nodeGrid) {\n      for (let col in nodeGrid[row]) {\n        nodeGrid[row][col].removeVisuals();\n      }\n    }\n  };\n\n  return { nodeGrid, resetGrid, removeVisuals };\n};\n\nexport default useNodeGrid;\n","import React from \"react\";\nimport classes from \"./NavigationItem.module.css\";\n\nconst NavigationItem = ({ children, clicked }) => (\n  <div className={classes.NavigationItem}>\n    <button onClick={clicked} className={classes.Btn}>\n      {children}\n    </button>\n  </div>\n);\nexport default NavigationItem;\n","import React from \"react\";\nimport \"./DropDown.css\";\n\nconst DropDown = ({ children, clicked, moreInfo, title }) => {\n  return (\n    <div class=\"dropdown\">\n      <button class=\"dropbtn\">\n        {title}\n      </button>\n      <div class=\"dropdown-content\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default DropDown;\n","import React from \"react\";\nimport \"./Subnav.css\";\n\nconst Subnav = ({ children, title }) => {\n  return (\n    <div class=\"subnav\">\n      <button class=\"subnavbtn\">{title}</button>\n      <div class=\"subnav-content\">{children}</div>\n    </div>\n  );\n};\n\nexport default Subnav;\n","import React from \"react\";\n\nconst DropItem = ({children, clicked}) => {\nreturn <p onClick={clicked}>{children}</p>;\n};\n\nexport default DropItem;\n","import React from \"react\";\nimport NavigationItem from \"./NavigationItem/NavigationItem\";\nimport * as cts from \"../../../utility\";\nimport DropDown from \"./Dropdown/DropDown\";\nimport Subnav from \"./Subnav/Subnav\";\nimport DropItem from \"./Dropdown/DropItem/DropItem\";\n\nconst NavigationItems = ({\n  setAlgorithm,\n  reset,\n  executeAlgorithm,\n  toggleShowModal,\n  algorithm,\n  mazeGen,\n  settingSecondTarget,\n  clear,\n}) => (\n  <>\n    <NavigationItem clicked={toggleShowModal}>GRAPH ALGORITHMS</NavigationItem>\n    <Subnav title=\"Algorithms\">\n      <DropDown title={cts.DIJKSTRA}>\n        <DropItem clicked={() => setAlgorithm(cts.DIJKSTRA)}>Select</DropItem>\n        <DropItem clicked={() => alert(cts.DIJKSTRA)}>Learn More</DropItem>\n      </DropDown>\n      <DropDown\n        clicked={() => setAlgorithm(cts.ASTAR)}\n        moreInfo={() => alert(cts.ASTAR)}\n        title={cts.ASTAR}\n      >\n        <DropItem clicked={() => setAlgorithm(cts.ASTAR)}>Select</DropItem>\n        <DropItem clicked={() => alert(cts.ASTAR)}>Learn More</DropItem>\n      </DropDown>\n      <DropDown\n        clicked={() => setAlgorithm(cts.GREEDY_BFS)}\n        moreInfo={() => alert(cts.GREEDY_BFS)}\n        title={cts.GREEDY_BFS}\n      >\n        <DropItem clicked={() => setAlgorithm(cts.GREEDY_BFS)}>Select</DropItem>\n        <DropItem clicked={() => alert(cts.GREEDY_BFS)}>Learn More</DropItem>\n      </DropDown>\n      <DropDown title={cts.BFS}>\n        <DropItem clicked={() => setAlgorithm(cts.BFS)}>Select</DropItem>\n        <DropItem clicked={() => alert(cts.BFS)}>Learn More</DropItem>\n      </DropDown>\n      <DropDown title={cts.DFS}>\n        <DropItem clicked={() => setAlgorithm(cts.DFS)}>Select</DropItem>\n        <DropItem clicked={() => alert(cts.DFS)}>Learn More</DropItem>\n      </DropDown>\n    </Subnav>\n    <Subnav title=\"Maze Generators\">\n      <DropDown\n        title={cts.RAND_MAZE}\n        clicked={() => mazeGen(cts.RAND_MAZE)}\n        moreInfo={() => alert(cts.DIJKSTRA)}\n      >\n        <DropItem clicked={() => mazeGen(cts.RAND_MAZE)}>Generate</DropItem>\n        <DropItem clicked={() => alert(cts.RECURSIVE_DIVISON)}>\n          Learn More\n        </DropItem>\n      </DropDown>\n      <DropDown title={cts.RECURSIVE_DIVISON}>\n        <DropItem clicked={() => mazeGen(cts.RECURSIVE_DIVISON)}>\n          Generate\n        </DropItem>\n        <DropItem clicked={() => alert(cts.RECURSIVE_DIVISON)}>\n          Learn More\n        </DropItem>\n      </DropDown>\n    </Subnav>\n    <NavigationItem clicked={() => settingSecondTarget(true)}>Add Second Target</NavigationItem>\n    <NavigationItem clicked={reset}>Reset</NavigationItem>\n    <NavigationItem clicked={clear}>Clear Visualization</NavigationItem>\n    <NavigationItem clicked={executeAlgorithm}>\n      Visualize {algorithm}!\n    </NavigationItem>\n  </>\n);\nexport default NavigationItems;\n","import React from \"react\";\nimport classes from \"./Toolbar.module.css\";\nimport NavigationItems from \"../NavigationItems/NavigationItems\";\n\nconst toolbar = (props) => {\n  return (\n    <header className={classes.Toolbar}>\n        <NavigationItems {...props} />\n    </header>\n  );\n};\nexport default toolbar;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport * as util from \"../utility/index\";\nimport \"./Board.css\";\nimport useNodeGrid from \"../hooks/useNodeGrid\";\nimport Navbar from \"./Navigation/Toolbar/Toolbar\";\n\nconst ROWS_INIT = 20;\nconst COLS_INIT = 50;\n\nconst Board = () => {\n  const [algorithm, setAlgorithm] = useState(util.DIJKSTRA);\n  const { nodeGrid, resetGrid, removeVisuals } = useNodeGrid();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [animating, setIsAnimating] = useState(true);\n  const [isMovingTarget, setIsMovingTarget] = useState(false);\n  const [isMovingSecondTarget, setIsMovingSecondTarget] = useState(false);\n  const [isMovingStart, setIsMovingStart] = useState(false);\n  const [settingSecondTarget, setSettingSecondTarget] = useState(false);\n  const [hasSecondTarget, setHasSecondTarget] = useState(false);\n  const [numTargets, setNumTargets] = useState(1);\n\n  const onMouseEnterHandler = (node) => {\n    if (!animating) return;\n    if (settingSecondTarget) {\n      node.setAsSecondTarget();\n    }\n    if (\n      isMouseDown &&\n      !isMovingStart &&\n      !isMovingTarget &&\n      !isMovingSecondTarget\n    ) {\n      node.setWall();\n    }\n    if (isMouseDown && isMovingStart) node.setAsStart();\n    if (isMouseDown && isMovingTarget) node.setAsTarget();\n    if (isMouseDown && isMovingSecondTarget) node.setAsSecondTarget();\n  };\n\n  const onMouseDownHandler = (node) => {\n    if (!animating) return;\n    setIsMouseDown(true);\n    if (settingSecondTarget) {\n      let num = numTargets;\n      setNumTargets(num + 1);\n      setHasSecondTarget(true);\n      return setSettingSecondTarget(false);\n    }\n    if (!node.isKeyValue()) return node.setWall();\n    if (node.isStart()) return setIsMovingStart(true);\n    if (node.isTarget()) return setIsMovingTarget(true);\n    if (node.isSecondTarget()) return setIsMovingSecondTarget(true);\n  };\n\n  const onMouseLeaveHandler = (node) => {\n    if (!animating) return;\n    if (\n      isMovingStart ||\n      isMovingTarget ||\n      settingSecondTarget ||\n      isMovingSecondTarget\n    )\n      node.clear();\n  };\n\n  const onMouseUpHandler = () => {\n    if (!animating) return;\n    setIsMouseDown(false);\n    setIsMovingStart(false);\n    setIsMovingTarget(false);\n    setIsMovingSecondTarget(false);\n  };\n\n  let Grid = nodeGrid.map((row, rowNum) => {\n    return row.map((val, colNum) => {\n      return (\n        <Cell\n          key={val}\n          node={nodeGrid[rowNum][colNum]}\n          onMouseEnter={onMouseEnterHandler}\n          onMouseDown={onMouseDownHandler}\n          onMouseUp={onMouseUpHandler}\n          onMouseLeave={onMouseLeaveHandler}\n        />\n      );\n    });\n  });\n\n  const executeAlgorithm = (type) => {\n    removeVisualization();\n    if (!animating) return;\n    setIsAnimating(false);\n\n    let animations = [];\n    switch (algorithm) {\n      case util.BFS:\n        animations = BFS();\n        break;\n      case util.DFS:\n        animations = DFS();\n        break;\n      case util.ASTAR:\n        animations = AStar();\n        break;\n      case util.DIJKSTRA:\n        animations = Dijkstra();\n        break;\n      case util.GREEDY_BFS:\n        animations = bestFirstSearch();\n        break;\n      default:\n        animations = BFS();\n        break;\n    }\n    animate(animations);\n  };\n\n  const BFS = () => {\n    const { startNode, graph } = util.generateGraph(nodeGrid);\n    const animations = graph.bfs(startNode);\n    return animations;\n  };\n\n  const DFS = () => {\n    const { startNode, graph } = util.generateGraph(nodeGrid);\n    const animations = graph.dfs(startNode);\n    return animations;\n  };\n\n  const Dijkstra = () => {\n    const { startNode, graph } = util.generateGraph(nodeGrid);\n    const animations = [];\n    graph.dijkstra(startNode, animations, hasSecondTarget);\n    return animations;\n  };\n\n  const AStar = () => {\n    const { startNode, graph, targetNode } = util.generateGraph(nodeGrid);\n    const animations = graph.aStar(startNode, targetNode);\n    return animations;\n  };\n\n  const bestFirstSearch = () => {\n    const { startNode, graph, targetNode } = util.generateGraph(nodeGrid);\n    const animations = graph.bestFirstSearch(startNode, targetNode);\n    return animations;\n  };\n\n  const clear = () => {\n    if (!animating) return;\n    setHasSecondTarget(false);\n    resetGrid();\n  };\n\n  const removeVisualization = () => {\n    if (!animating) return;\n    removeVisuals();\n  };\n\n  const generateMaze = (type) => {\n    switch (type) {\n      case util.RECURSIVE_DIVISON:\n        doRecursiveDivision();\n        break;\n      default:\n        doRandomMaze();\n        break;\n    }\n  };\n\n  const doRandomMaze = () => {\n    if (!animating) return;\n    clear();\n    util.randomMaze(nodeGrid);\n  };\n\n  const doRecursiveDivision = () => {\n    if (!animating) return;\n    clear();\n    util.recursiveDivision(nodeGrid);\n  };\n\n  const animate = (animations) => {\n    if (animations.length <= 0) {\n      setIsAnimating(true);\n      return;\n    }\n    let count = 0;\n    let targetNum = 1;\n\n    const intervalId = setInterval(() => {\n      const node = animations[count];\n\n      targetNum % 2 === 0 ? node.markSearched() : node.markSearched2();\n      \n      (node.isTarget() || node.isSecondTarget()) && node.markShortestPath(); \n\n      count++;\n\n      if (count >= animations.length) {\n        setIsAnimating(true);\n        clearInterval(intervalId);\n      }\n    }, 10);\n  };\n\n  return (\n    <div className=\"MainContainer\">\n      <Navbar\n        setAlgorithm={setAlgorithm}\n        reset={clear}\n        algorithm={algorithm}\n        executeAlgorithm={executeAlgorithm}\n        clear={removeVisualization}\n        mazeGen={generateMaze}\n        settingSecondTarget={setSettingSecondTarget}\n      />\n      <br />\n      <div\n        className=\"Board\"\n        style={{\n          gridTemplateRows: `repeat(${ROWS_INIT}, 1fr)`,\n          gridTemplateColumns: `repeat(${COLS_INIT}, 1fr)`,\n        }}\n      >\n        {Grid}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export const randomMaze = (board) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n        if (Math.random() <= 0.3) {\n          const node = board[row][col];\n          node.setWall()\n        }\n    }\n  }\n};\n","import React from 'react';\nimport './App.css';\nimport Board from \"./components/Board\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}